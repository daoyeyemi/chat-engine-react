{"ast":null,"code":"var _jsxFileName = \"/Users/daoyeyemi/Desktop/portfolioprojects/react-letuschat/src/components/SearchUsers/index.js\",\n    _s = $RefreshSig$();\n\nimport { useChat } from 'context';\nimport { useDebounce } from 'hooks';\nimport { Search } from 'semantic-ui-react';\nimport { useEffect, useRef, useState } from 'react';\nimport { addPerson, getOtherPeople } from 'react-chat-engine';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const SearchUsers = ({\n  visible,\n  closeFn\n}) => {\n  _s();\n\n  let searchRef = useRef();\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm, 500); // null -> not searching for results\n  // [] -> No results\n  // [...] -> Results\n\n  const [searchResults, setSearchResults] = useState(null);\n  useEffect(() => {\n    if (visible && searchRef) {\n      searchRef.focus();\n    }\n  }, [visible]);\n  const {\n    myChats,\n    setMyChats,\n    chatConfig,\n    selectedChat,\n    setSelectedChat\n  } = useChat();\n\n  const selectUser = username => {\n    addPerson(chatConfig, selectedChat.id, username, () => {\n      const filteredChats = myChats.filter(c => c.id !== selectedChat.id);\n      const updatedChat = { ...selectedChat,\n        people: [...selectedChat.people, {\n          person: {\n            username\n          }\n        }]\n      };\n      setSelectedChat(updatedChat);\n      setMyChats([...filteredChats, updatedChat]);\n      closeFn();\n    });\n  };\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      setLoading(true);\n      getOtherPeople(chatConfig, selectedChat.id, (chatId, data) => {\n        const userNames = Object.keys(data).map(key => data[key].username).filter(u => u.toLowerCase().includes(debouncedSearchTerm.toLowerCase()));\n        setSearchResults(userNames.map(u => ({\n          title: u\n        })));\n        setLoading(false);\n      });\n    } else {\n      setSearchResults(null);\n    }\n  }, [debouncedSearchTerm, chatConfig, selectedChat]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user-search\",\n    style: {\n      display: visible ? 'block' : 'none'\n    },\n    children: /*#__PURE__*/_jsxDEV(Search, {\n      fluid: true,\n      onBlur: closeFn,\n      loading: loading,\n      value: searchTerm,\n      placeholder: \"Search For Users\",\n      open: !!searchResults && !loading,\n      input: {\n        ref: r => searchRef = r\n      },\n      onSearchChange: e => setSearchTerm(e.target.value),\n      results: searchResults,\n      onResultSelect: (e, data) => {\n        var _data$result;\n\n        if ((_data$result = data.result) === null || _data$result === void 0 ? void 0 : _data$result.title) {\n          selectUser(data.result.title);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchUsers, \"2QK8ghDfkP2Ga3O235AanJW3EMQ=\", false, function () {\n  return [useDebounce, useChat];\n});\n\n_c = SearchUsers;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchUsers\");","map":{"version":3,"sources":["/Users/daoyeyemi/Desktop/portfolioprojects/react-letuschat/src/components/SearchUsers/index.js"],"names":["useChat","useDebounce","Search","useEffect","useRef","useState","addPerson","getOtherPeople","SearchUsers","visible","closeFn","searchRef","loading","setLoading","searchTerm","setSearchTerm","debouncedSearchTerm","searchResults","setSearchResults","focus","myChats","setMyChats","chatConfig","selectedChat","setSelectedChat","selectUser","username","id","filteredChats","filter","c","updatedChat","people","person","chatId","data","userNames","Object","keys","map","key","u","toLowerCase","includes","title","display","ref","r","e","target","value","result"],"mappings":"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","sourcesContent":["import { useChat } from 'context';\nimport { useDebounce } from 'hooks';\nimport { Search } from 'semantic-ui-react';\nimport { useEffect, useRef, useState } from 'react';\nimport { addPerson, getOtherPeople } from 'react-chat-engine';\n\nexport const SearchUsers = ({ visible, closeFn }) => {\n  let searchRef = useRef();\n\n  const [loading, setLoading] = useState(false);\n  const [searchTerm, setSearchTerm] = useState('');\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n  // null -> not searching for results\n  // [] -> No results\n  // [...] -> Results\n  const [searchResults, setSearchResults] = useState(null);\n\n  useEffect(() => {\n    if (visible && searchRef) {\n      searchRef.focus();\n    }\n  }, [visible]);\n\n  const {\n    myChats,\n    setMyChats,\n    chatConfig,\n    selectedChat,\n    setSelectedChat,\n  } = useChat();\n\n  const selectUser = username => {\n    addPerson(chatConfig, selectedChat.id, username, () => {\n      const filteredChats = myChats.filter(c => c.id !== selectedChat.id);\n      const updatedChat = {\n        ...selectedChat,\n        people: [...selectedChat.people, { person: { username } }],\n      };\n\n      setSelectedChat(updatedChat);\n      setMyChats([...filteredChats, updatedChat]);\n      closeFn();\n    });\n  };\n\n  useEffect(() => {\n    if (debouncedSearchTerm) {\n      setLoading(true);\n      getOtherPeople(chatConfig, selectedChat.id, (chatId, data) => {\n        const userNames = Object.keys(data)\n          .map(key => data[key].username)\n          .filter(u =>\n            u.toLowerCase().includes(debouncedSearchTerm.toLowerCase()),\n          );\n        setSearchResults(userNames.map(u => ({ title: u })));\n        setLoading(false);\n      });\n    } else {\n      setSearchResults(null);\n    }\n  }, [debouncedSearchTerm, chatConfig, selectedChat]);\n\n  return (\n    <div\n      className=\"user-search\"\n      style={{ display: visible ? 'block' : 'none' }}\n    >\n      <Search\n        fluid\n        onBlur={closeFn}\n        loading={loading}\n        value={searchTerm}\n        placeholder=\"Search For Users\"\n        open={!!searchResults && !loading}\n        input={{ ref: r => (searchRef = r) }}\n        onSearchChange={e => setSearchTerm(e.target.value)}\n        results={searchResults}\n        onResultSelect={(e, data) => {\n          if (data.result?.title) {\n            selectUser(data.result.title);\n          }\n        }}\n      />\n    </div>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}