{"ast":null,"code":"export const joinUsernames = (people, currentUsername) => {\n  return '@' + people.map(p => p.person.username).filter(un => un !== currentUsername).join(', @');\n};\nexport const groupMessages = messages => {\n  const finalArr = [];\n  let currentArr = [];\n  let currentAuthor = '';\n  messages.forEach(m => {\n    // If we are on a new author\n    // This also works on the initial iteration because the value is initially empty string\n    if (m.sender.username !== currentAuthor) {\n      if (currentAuthor) {\n        finalArr.push([...currentArr]);\n      }\n\n      currentArr.splice(0, currentArr.length); // empty the array\n\n      currentArr.push(m);\n      currentAuthor = m.sender.username;\n    } else {\n      currentArr.push(m);\n    }\n  }); // We have to call this at the very end as well because\n  // once the loop finishes, the first if(){} block will\n  // not run and thus the finalArr.push line will not run\n\n  finalArr.push([...currentArr]);\n  return finalArr;\n};\nexport const notMe = (chatConfig, selectedChat) => {\n  var _selectedChat$people$, _selectedChat$people$2;\n\n  return (_selectedChat$people$ = selectedChat.people.find(p => p.person.username !== chatConfig.userName)) === null || _selectedChat$people$ === void 0 ? void 0 : (_selectedChat$people$2 = _selectedChat$people$.person) === null || _selectedChat$people$2 === void 0 ? void 0 : _selectedChat$people$2.username;\n};","map":{"version":3,"sources":["/Users/daoyeyemi/Desktop/portfolioprojects/react-letuschat/src/helpers/index.js"],"names":["joinUsernames","people","currentUsername","map","p","person","username","filter","un","join","groupMessages","messages","finalArr","currentArr","currentAuthor","forEach","m","sender","push","splice","length","notMe","chatConfig","selectedChat","find","userName"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,CAACC,MAAD,EAASC,eAAT,KAA6B;AACtD,SAAO,MAAMD,MAAM,CAChBE,GADU,CACNC,CAAC,IAAIA,CAAC,CAACC,MAAF,CAASC,QADR,EAEVC,MAFU,CAEHC,EAAE,IAAIA,EAAE,KAAKN,eAFV,EAGVO,IAHU,CAGL,KAHK,CAAb;AAID,CALI;AAOP,OAAO,MAAMC,aAAa,GAAGC,QAAQ,IAAI;AACrC,QAAMC,QAAQ,GAAG,EAAjB;AAEA,MAAIC,UAAU,GAAG,EAAjB;AACA,MAAIC,aAAa,GAAG,EAApB;AACAH,EAAAA,QAAQ,CAACI,OAAT,CAAiBC,CAAC,IAAI;AAClB;AACA;AACA,QAAIA,CAAC,CAACC,MAAF,CAASX,QAAT,KAAsBQ,aAA1B,EAAyC;AACzC,UAAIA,aAAJ,EAAmB;AACfF,QAAAA,QAAQ,CAACM,IAAT,CAAc,CAAC,GAAGL,UAAJ,CAAd;AACH;;AACDA,MAAAA,UAAU,CAACM,MAAX,CAAkB,CAAlB,EAAqBN,UAAU,CAACO,MAAhC,EAJyC,CAIA;;AACzCP,MAAAA,UAAU,CAACK,IAAX,CAAgBF,CAAhB;AACAF,MAAAA,aAAa,GAAGE,CAAC,CAACC,MAAF,CAASX,QAAzB;AACC,KAPD,MAOO;AACPO,MAAAA,UAAU,CAACK,IAAX,CAAgBF,CAAhB;AACC;AACJ,GAbD,EALqC,CAoBrC;AACA;AACA;;AACAJ,EAAAA,QAAQ,CAACM,IAAT,CAAc,CAAC,GAAGL,UAAJ,CAAd;AAEA,SAAOD,QAAP;AACH,CA1BM;AA4BP,OAAO,MAAMS,KAAK,GAAG,CAACC,UAAD,EAAaC,YAAb,KAA8B;AAAA;;AAC/C,kCAAOA,YAAY,CAACtB,MAAb,CAAoBuB,IAApB,CAAyBpB,CAAC,IAAIA,CAAC,CAACC,MAAF,CAASC,QAAT,KAAsBgB,UAAU,CAACG,QAA/D,CAAP,oFAAO,sBAA0EpB,MAAjF,2DAAO,uBAAkFC,QAAzF;AACD,CAFI","sourcesContent":["export const joinUsernames = (people, currentUsername) => {\n    return '@' + people\n      .map(p => p.person.username)\n      .filter(un => un !== currentUsername)\n      .join(', @');\n  };\n\nexport const groupMessages = messages => {\n    const finalArr = [];\n\n    let currentArr = [];\n    let currentAuthor = '';\n    messages.forEach(m => {\n        // If we are on a new author\n        // This also works on the initial iteration because the value is initially empty string\n        if (m.sender.username !== currentAuthor) {\n        if (currentAuthor) {\n            finalArr.push([...currentArr]);\n        }\n        currentArr.splice(0, currentArr.length); // empty the array\n        currentArr.push(m);\n        currentAuthor = m.sender.username;\n        } else {\n        currentArr.push(m);\n        }\n    });\n\n    // We have to call this at the very end as well because\n    // once the loop finishes, the first if(){} block will\n    // not run and thus the finalArr.push line will not run\n    finalArr.push([...currentArr]);\n\n    return finalArr;\n};\n\nexport const notMe = (chatConfig, selectedChat) => {\n    return selectedChat.people.find(p => p.person.username !== chatConfig.userName)?.person?.username;\n  };\n  \n\n\n"]},"metadata":{},"sourceType":"module"}