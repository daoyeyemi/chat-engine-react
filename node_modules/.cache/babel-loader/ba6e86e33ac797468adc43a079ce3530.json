{"ast":null,"code":"var _jsxFileName = \"/Users/daoyeyemi/Desktop/portfolioprojects/react-letuschat/src/components/Chat/index.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect } from 'react';\nimport { useChat } from 'context';\nimport { getChats, ChatEngine } from 'react-chat-engine';\nimport { LeftRail } from 'components/LeftRail';\nimport { ChatToolbar } from 'components/ChatToolbar';\nimport { ChatInput } from 'components/ChatInput';\nimport { MessageList } from 'components/MessageList';\nimport { Icon } from \"semantic-ui-react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const Chat = () => {\n  _s();\n\n  const {\n    myChats,\n    setMyChats,\n    chatConfig,\n    selectedChat,\n    selectChatClick,\n    setSelectedChat\n  } = useChat();\n  useEffect(() => {\n    console.log('My Chats: ', myChats);\n  }, [myChats]);\n  useEffect(() => {\n    console.log('Selected Chat: ', selectedChat);\n  }, [selectedChat]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [!!chatConfig && /*#__PURE__*/_jsxDEV(ChatEngine, {\n      hideUI: true,\n      userName: chatConfig.userName,\n      projectID: chatConfig.projectID,\n      userSecret: chatConfig.userSecret,\n      onConnect: () => {\n        getChats(chatConfig, setMyChats);\n      },\n      onNewChat: chat => {\n        if (chat.admin.username === chatConfig.userName) {\n          selectChatClick(chat);\n        }\n\n        setMyChats([...myChats, chat].sort((a, b) => a.id - b.id));\n      },\n      onDeleteChat: chat => {\n        if ((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.id) === chat.id) {\n          setSelectedChat(null);\n        }\n\n        setMyChats(myChats.filter(c => c.id !== chat.id).sort((a, b) => a.id - b.id));\n      },\n      onNewMessage: (chatId, message) => {\n        if (selectedChat && chatId === selectedChat.id) {\n          setSelectedChat({ ...selectedChat,\n            messages: [...selectedChat.messages, message]\n          });\n          console.log(message);\n          console.log(selectedChat);\n        }\n\n        const chatThatMessageBelongsTo = myChats.find(c => c.id === chatId);\n        const filteredChats = myChats.filter(c => c.id !== chatId);\n        const updatedChat = { ...chatThatMessageBelongsTo,\n          last_message: message\n        };\n        setMyChats([updatedChat, ...filteredChats].sort((a, b) => a.id - b.id));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(LeftRail, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-chat\",\n        children: selectedChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat\",\n          children: [/*#__PURE__*/_jsxDEV(ChatToolbar, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(MessageList, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(ChatInput, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-chat-selected\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"arrow-left\",\n            children: /*#__PURE__*/_jsxDEV(Icon, {\n              name: \"arrow alternate circle left outline\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this), \"Choose a Chat\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Chat, \"W/VFvgTKvZc65i0GMFo05QnySLk=\", false, function () {\n  return [useChat];\n});\n\n_c = Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/Users/daoyeyemi/Desktop/portfolioprojects/react-letuschat/src/components/Chat/index.js"],"names":["useEffect","useChat","getChats","ChatEngine","LeftRail","ChatToolbar","ChatInput","MessageList","Icon","Chat","myChats","setMyChats","chatConfig","selectedChat","selectChatClick","setSelectedChat","console","log","userName","projectID","userSecret","chat","admin","username","sort","a","b","id","filter","c","chatId","message","messages","chatThatMessageBelongsTo","find","filteredChats","updatedChat","last_message"],"mappings":"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","sourcesContent":["import { useEffect } from 'react';\nimport { useChat } from 'context';\nimport { getChats, ChatEngine } from 'react-chat-engine';\nimport { LeftRail } from 'components/LeftRail';\nimport { ChatToolbar } from 'components/ChatToolbar';\nimport { ChatInput } from 'components/ChatInput';\nimport { MessageList } from 'components/MessageList';\nimport { Icon } from \"semantic-ui-react\";\n\nexport const Chat = () => {\n  const {\n    myChats,\n    setMyChats,\n    chatConfig,\n    selectedChat,\n    selectChatClick,\n    setSelectedChat,\n  } = useChat();\n\n  useEffect(() => {\n    console.log('My Chats: ', myChats);\n  }, [myChats]);\n\n  useEffect(() => {\n    console.log('Selected Chat: ', selectedChat);\n  }, [selectedChat]);\n\n  return (\n    <>\n      {!!chatConfig && (\n        <ChatEngine\n          hideUI={true}\n          userName={chatConfig.userName}\n          projectID={chatConfig.projectID}\n          userSecret={chatConfig.userSecret}\n          onConnect={() => {\n            getChats(chatConfig, setMyChats);\n          }}\n          onNewChat={chat => {\n            if (chat.admin.username === chatConfig.userName) {\n              selectChatClick(chat);\n            }\n            setMyChats([...myChats, chat].sort((a, b) => a.id - b.id));\n          }}\n          onDeleteChat={chat => {\n            if (selectedChat?.id === chat.id) {\n              setSelectedChat(null);\n            }\n            setMyChats(\n              myChats.filter(c => c.id !== chat.id).sort((a, b) => a.id - b.id),\n            );\n          }}\n          onNewMessage={(chatId, message) => {\n            if (selectedChat && chatId === selectedChat.id) {\n              setSelectedChat({\n                ...selectedChat,\n                messages: [...selectedChat.messages, message]\n              });\n              console.log(message);\n              console.log(selectedChat);\n            }\n            const chatThatMessageBelongsTo = myChats.find(c => c.id === chatId);\n            const filteredChats = myChats.filter(c => c.id !== chatId);\n            const updatedChat = {\n              ...chatThatMessageBelongsTo,\n              last_message: message,\n            };\n            setMyChats(\n              [updatedChat, ...filteredChats].sort((a, b) => a.id - b.id),\n            );\n          }}\n        />\n      )}\n\n      <div className=\"chat-container\">\n        <LeftRail />\n        <div className=\"current-chat\">\n          {selectedChat ? (\n            <div className=\"chat\">\n              <ChatToolbar />\n              <MessageList />\n              <ChatInput />\n            </div>\n          ) : (\n            <div className=\"no-chat-selected\">\n              <div className=\"arrow-left\">\n                <Icon name=\"arrow alternate circle left outline\" />\n              </div>\n              Choose a Chat\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}